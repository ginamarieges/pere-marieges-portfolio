---
interface Props {
  id: number,
  name: string,
  type: "architecture" | "city" | "landscape",
  images: string[],
  description: string,
  localization: string,
  team?: string
};

const { description, id, images, localization, name, type, team } = Astro.props;

// Divide las imágenes en grupos para replicar la estructura de las columnas
const columnCount = 3; // Puedes ajustar el número de columnas
const imageColumns = Array.from({ length: columnCount }, (_, i) => 
  images.filter((_, index) => index % columnCount === i)
);
let backgroundColor = "";
switch (type) {
  case "architecture":
    backgroundColor = "bg-architecture";
    break;
  case "city":
    backgroundColor = "bg-tertiary";
    break;
  case "landscape":
    backgroundColor = "bg-secondary";
    break;
  default:
    backgroundColor = "bg-gray-500"; // Opcional, para manejar tipos desconocidos
};
---
<div class={`p-4 ${backgroundColor} text-white rounded-3xl`}>
  <h2 class="text-xl py-2">{name}</h2>

  <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
    {
      imageColumns.map((column) => (
        <div class="grid gap-4">
          {
            column.map((image, imgIndex) => (
              <div>
                <img 
                  class="h-auto max-w-full rounded-lg" 
                  src={`/Project_${id}/${image}`} 
                  alt={`Image ${imgIndex + 1} of project ${id}`}
                />
              </div>
            ))
          }
        </div>
      ))
    }
  </div>

<span>{localization}</span>
</div>
